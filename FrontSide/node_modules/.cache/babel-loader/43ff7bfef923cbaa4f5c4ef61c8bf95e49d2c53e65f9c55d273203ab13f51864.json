{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usager\\\\Documents\\\\FaceRecognitionProject\\\\fr_front\\\\src\\\\FaceReco\\\\VideoCapture.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"./VideoCapture.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCapture = ({\n  isConnected\n}) => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [dimensions, setDimensions] = useState({\n    width: 740,\n    height: 480\n  });\n  const [message, setMessage] = useState(\"\");\n  const FRAME_INTERVAL = 1000; // 1 second interval\n  const MAX_RETRIES = 3;\n  const RETRY_DELAY = 2000;\n\n  // Setup camera once on mount\n  useEffect(() => {\n    const setupCamera = async () => {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            ideal: dimensions.width\n          },\n          height: {\n            ideal: dimensions.height\n          }\n        }\n      });\n      videoRef.current.srcObject = stream;\n      await videoRef.current.play();\n    };\n    if (videoRef.current) {\n      setupCamera().catch(console.error);\n    }\n  }, []); // Empty dependency array - run once on mount\n\n  // Handle frame capture only when connected\n  useEffect(() => {\n    let frameInterval = null;\n    let errorCount = 0;\n    let lastProcessingTime = Date.now();\n    const processFrame = async () => {\n      try {\n        // Don't send new frame if previous is still processing\n        if (Date.now() - lastProcessingTime < 800) {\n          return;\n        }\n        const frame = captureFrame(); // Your frame capture logic\n        lastProcessingTime = Date.now();\n        const response = await fetch(\"/process-frame\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            frame\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Frame processing failed\");\n        }\n        errorCount = 0; // Reset error count on success\n      } catch (error) {\n        console.error(\"Frame processing error:\", error);\n        errorCount++;\n        if (errorCount >= MAX_RETRIES) {\n          clearInterval(frameInterval);\n          // Attempt reconnection after delay\n        }\n      }\n    };\n    if (isConnected && videoRef.current) {\n      frameInterval = setInterval(() => {\n        processFrame();\n      }, FRAME_INTERVAL);\n    }\n    return () => {\n      if (frameInterval) clearInterval(frameInterval);\n    };\n  }, [isConnected]);\n  const captureFrameAndSend = async () => {\n    if (!canvasRef.current || !videoRef.current) return;\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    canvas.width = dimensions.width;\n    canvas.height = dimensions.height;\n    const context = canvas.getContext(\"2d\");\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    try {\n      const response = await fetch(\"http://localhost:5000/process-frame\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          frame: canvas.toDataURL(\"image/png\")\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setMessage(data.message);\n      console.log(\"Response from server:\", data);\n    } catch (error) {\n      console.error(\"Error sending frame:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      width: dimensions.width,\n      height: dimensions.height,\n      autoPlay: true,\n      playsInline: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: dimensions.width,\n      height: dimensions.height,\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCapture, \"16IzVxsG1/4O0NBGfuShOHzSSWE=\");\n_c = VideoCapture;\nexport default VideoCapture;\nvar _c;\n$RefreshReg$(_c, \"VideoCapture\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","VideoCapture","isConnected","_s","videoRef","canvasRef","dimensions","setDimensions","width","height","message","setMessage","FRAME_INTERVAL","MAX_RETRIES","RETRY_DELAY","setupCamera","stream","navigator","mediaDevices","getUserMedia","video","ideal","current","srcObject","play","catch","console","error","frameInterval","errorCount","lastProcessingTime","Date","now","processFrame","frame","captureFrame","response","fetch","method","headers","body","JSON","stringify","ok","Error","clearInterval","setInterval","captureFrameAndSend","canvas","context","getContext","drawImage","toDataURL","status","data","json","log","className","children","ref","autoPlay","playsInline","muted","fileName","_jsxFileName","lineNumber","columnNumber","style","display","_c","$RefreshReg$"],"sources":["C:/Users/Usager/Documents/FaceRecognitionProject/fr_front/src/FaceReco/VideoCapture.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport \"./VideoCapture.css\";\r\n\r\nconst VideoCapture = ({ isConnected }) => {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [dimensions, setDimensions] = useState({ width: 740, height: 480 });\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const FRAME_INTERVAL = 1000; // 1 second interval\r\n  const MAX_RETRIES = 3;\r\n  const RETRY_DELAY = 2000;\r\n\r\n  // Setup camera once on mount\r\n  useEffect(() => {\r\n    const setupCamera = async () => {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: {\r\n          width: { ideal: dimensions.width },\r\n          height: { ideal: dimensions.height },\r\n        },\r\n      });\r\n      videoRef.current.srcObject = stream;\r\n      await videoRef.current.play();\r\n    };\r\n\r\n    if (videoRef.current) {\r\n      setupCamera().catch(console.error);\r\n    }\r\n  }, []); // Empty dependency array - run once on mount\r\n\r\n  // Handle frame capture only when connected\r\n  useEffect(() => {\r\n    let frameInterval = null;\r\n    let errorCount = 0;\r\n    let lastProcessingTime = Date.now();\r\n\r\n    const processFrame = async () => {\r\n      try {\r\n        // Don't send new frame if previous is still processing\r\n        if (Date.now() - lastProcessingTime < 800) {\r\n          return;\r\n        }\r\n\r\n        const frame = captureFrame(); // Your frame capture logic\r\n        lastProcessingTime = Date.now();\r\n\r\n        const response = await fetch(\"/process-frame\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ frame }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Frame processing failed\");\r\n        }\r\n\r\n        errorCount = 0; // Reset error count on success\r\n      } catch (error) {\r\n        console.error(\"Frame processing error:\", error);\r\n        errorCount++;\r\n\r\n        if (errorCount >= MAX_RETRIES) {\r\n          clearInterval(frameInterval);\r\n          // Attempt reconnection after delay\r\n        }\r\n      }\r\n    };\r\n\r\n    if (isConnected && videoRef.current) {\r\n      frameInterval = setInterval(() => {\r\n        processFrame();\r\n      }, FRAME_INTERVAL);\r\n    }\r\n\r\n    return () => {\r\n      if (frameInterval) clearInterval(frameInterval);\r\n    };\r\n  }, [isConnected]);\r\n\r\n  const captureFrameAndSend = async () => {\r\n    if (!canvasRef.current || !videoRef.current) return;\r\n\r\n    const canvas = canvasRef.current;\r\n    const video = videoRef.current;\r\n\r\n    canvas.width = dimensions.width;\r\n    canvas.height = dimensions.height;\r\n\r\n    const context = canvas.getContext(\"2d\");\r\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/process-frame\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          frame: canvas.toDataURL(\"image/png\"),\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      setMessage(data.message);\r\n      console.log(\"Response from server:\", data);\r\n    } catch (error) {\r\n      console.error(\"Error sending frame:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"video-container\">\r\n      <video\r\n        ref={videoRef}\r\n        width={dimensions.width}\r\n        height={dimensions.height}\r\n        autoPlay\r\n        playsInline\r\n        muted\r\n      />\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={dimensions.width}\r\n        height={dimensions.height}\r\n        style={{ display: \"none\" }}\r\n      />\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}