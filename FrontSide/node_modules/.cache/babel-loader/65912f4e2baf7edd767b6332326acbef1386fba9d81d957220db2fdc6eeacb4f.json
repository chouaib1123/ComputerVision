{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usager\\\\Documents\\\\FaceRecognitionProject\\\\fr_front\\\\src\\\\FaceReco\\\\VideoCapture.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"./VideoCapture.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCapture = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [dimensions, setDimensions] = useState({\n    width: 740,\n    height: 480\n  });\n  useEffect(() => {\n    let stream = null;\n    const setupCamera = async () => {\n      try {\n        stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            width: dimensions.width,\n            height: dimensions.height\n          }\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n          videoRef.current.onloadedmetadata = () => {\n            videoRef.current.play();\n            setDimensions({\n              width: videoRef.current.videoWidth,\n              height: videoRef.current.videoHeight\n            });\n          };\n        }\n      } catch (err) {\n        console.error(\"Error accessing camera: \", err);\n      }\n    };\n    setupCamera();\n    return () => {\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n  useEffect(() => {\n    let frameInterval = null;\n    if (videoRef.current && videoRef.current.readyState === 4) {\n      frameInterval = setInterval(captureFrameAndSend, 15000);\n    }\n    return () => {\n      if (frameInterval) clearInterval(frameInterval);\n    };\n  }, [dimensions]);\n  const captureFrameAndSend = async () => {\n    if (!canvasRef.current || !videoRef.current) return;\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    canvas.width = dimensions.width;\n    canvas.height = dimensions.height;\n    const context = canvas.getContext(\"2d\");\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    try {\n      const response = await fetch(\"http://localhost:5000/process-frame\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          frame: canvas.toDataURL(\"image/png\")\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Error sending frame:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      width: dimensions.width,\n      height: dimensions.height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: dimensions.width,\n      height: dimensions.height,\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCapture, \"D5pX52uU1XxbuG72AdlJTQ6KPhg=\");\n_c = VideoCapture;\nexport default VideoCapture;\nvar _c;\n$RefreshReg$(_c, \"VideoCapture\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","VideoCapture","_s","videoRef","canvasRef","dimensions","setDimensions","width","height","stream","setupCamera","navigator","mediaDevices","getUserMedia","video","current","srcObject","onloadedmetadata","play","videoWidth","videoHeight","err","console","error","getTracks","forEach","track","stop","frameInterval","readyState","setInterval","captureFrameAndSend","clearInterval","canvas","context","getContext","drawImage","response","fetch","method","headers","body","JSON","stringify","frame","toDataURL","ok","Error","status","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","style","display","_c","$RefreshReg$"],"sources":["C:/Users/Usager/Documents/FaceRecognitionProject/fr_front/src/FaceReco/VideoCapture.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport \"./VideoCapture.css\";\r\n\r\nconst VideoCapture = () => {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [dimensions, setDimensions] = useState({ width: 740, height: 480 });\r\n\r\n  useEffect(() => {\r\n    let stream = null;\r\n\r\n    const setupCamera = async () => {\r\n      try {\r\n        stream = await navigator.mediaDevices.getUserMedia({\r\n          video: {\r\n            width: dimensions.width,\r\n            height: dimensions.height,\r\n          },\r\n        });\r\n\r\n        if (videoRef.current) {\r\n          videoRef.current.srcObject = stream;\r\n          videoRef.current.onloadedmetadata = () => {\r\n            videoRef.current.play();\r\n            setDimensions({\r\n              width: videoRef.current.videoWidth,\r\n              height: videoRef.current.videoHeight,\r\n            });\r\n          };\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error accessing camera: \", err);\r\n      }\r\n    };\r\n\r\n    setupCamera();\r\n\r\n    return () => {\r\n      if (stream) {\r\n        stream.getTracks().forEach((track) => track.stop());\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let frameInterval = null;\r\n\r\n    if (videoRef.current && videoRef.current.readyState === 4) {\r\n      frameInterval = setInterval(captureFrameAndSend, 15000);\r\n    }\r\n\r\n    return () => {\r\n      if (frameInterval) clearInterval(frameInterval);\r\n    };\r\n  }, [dimensions]);\r\n\r\n  const captureFrameAndSend = async () => {\r\n    if (!canvasRef.current || !videoRef.current) return;\r\n\r\n    const canvas = canvasRef.current;\r\n    const video = videoRef.current;\r\n\r\n    canvas.width = dimensions.width;\r\n    canvas.height = dimensions.height;\r\n\r\n    const context = canvas.getContext(\"2d\");\r\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/process-frame\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          frame: canvas.toDataURL(\"image/png\"),\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error sending frame:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"video-container\">\r\n      <video\r\n        ref={videoRef}\r\n        width={dimensions.width}\r\n        height={dimensions.height}\r\n      />\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={dimensions.width}\r\n        height={dimensions.height}\r\n        style={{ display: \"none\" }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}