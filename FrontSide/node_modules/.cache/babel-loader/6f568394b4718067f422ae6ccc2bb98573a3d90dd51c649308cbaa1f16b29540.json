{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usager\\\\Documents\\\\FaceRecognitionProject\\\\fr_front\\\\src\\\\FaceReco\\\\VideoCapture.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"./VideoCapture.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCapture = ({\n  isConnected\n}) => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [dimensions, setDimensions] = useState({\n    width: 740,\n    height: 480\n  });\n\n  // Setup camera once on mount\n  useEffect(() => {\n    const setupCamera = async () => {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            ideal: dimensions.width\n          },\n          height: {\n            ideal: dimensions.height\n          }\n        }\n      });\n      videoRef.current.srcObject = stream;\n      await videoRef.current.play();\n    };\n    if (videoRef.current) {\n      setupCamera().catch(console.error);\n    }\n  }, []); // Empty dependency array - run once on mount\n\n  // Handle frame capture only when connected\n  useEffect(() => {\n    let frameInterval = null;\n    if (isConnected && videoRef.current) {\n      frameInterval = setInterval(() => {\n        captureFrameAndSend();\n      }, 500);\n    }\n    return () => {\n      if (frameInterval) clearInterval(frameInterval);\n    };\n  }, [isConnected]);\n  const captureFrameAndSend = async () => {\n    if (!canvasRef.current || !videoRef.current) return;\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    canvas.width = dimensions.width;\n    canvas.height = dimensions.height;\n    const context = canvas.getContext(\"2d\");\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    try {\n      const response = await fetch(\"http://localhost:5000/process-frame\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          frame: canvas.toDataURL(\"image/png\")\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Error sending frame:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      width: dimensions.width,\n      height: dimensions.height,\n      autoPlay: true,\n      playsInline: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: dimensions.width,\n      height: dimensions.height,\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCapture, \"D5pX52uU1XxbuG72AdlJTQ6KPhg=\");\n_c = VideoCapture;\nexport default VideoCapture;\nvar _c;\n$RefreshReg$(_c, \"VideoCapture\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","VideoCapture","isConnected","_s","videoRef","canvasRef","dimensions","setDimensions","width","height","setupCamera","stream","navigator","mediaDevices","getUserMedia","video","ideal","current","srcObject","play","catch","console","error","frameInterval","setInterval","captureFrameAndSend","clearInterval","canvas","context","getContext","drawImage","response","fetch","method","headers","body","JSON","stringify","frame","toDataURL","ok","Error","status","className","children","ref","autoPlay","playsInline","muted","fileName","_jsxFileName","lineNumber","columnNumber","style","display","_c","$RefreshReg$"],"sources":["C:/Users/Usager/Documents/FaceRecognitionProject/fr_front/src/FaceReco/VideoCapture.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport \"./VideoCapture.css\";\r\n\r\nconst VideoCapture = ({ isConnected }) => {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [dimensions, setDimensions] = useState({ width: 740, height: 480 });\r\n\r\n  // Setup camera once on mount\r\n  useEffect(() => {\r\n    const setupCamera = async () => {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: {\r\n          width: { ideal: dimensions.width },\r\n          height: { ideal: dimensions.height },\r\n        },\r\n      });\r\n      videoRef.current.srcObject = stream;\r\n      await videoRef.current.play();\r\n    };\r\n\r\n    if (videoRef.current) {\r\n      setupCamera().catch(console.error);\r\n    }\r\n  }, []); // Empty dependency array - run once on mount\r\n\r\n  // Handle frame capture only when connected\r\n  useEffect(() => {\r\n    let frameInterval = null;\r\n\r\n    if (isConnected && videoRef.current) {\r\n      frameInterval = setInterval(() => {\r\n        captureFrameAndSend();\r\n      }, 500);\r\n    }\r\n\r\n    return () => {\r\n      if (frameInterval) clearInterval(frameInterval);\r\n    };\r\n  }, [isConnected]);\r\n\r\n  const captureFrameAndSend = async () => {\r\n    if (!canvasRef.current || !videoRef.current) return;\r\n\r\n    const canvas = canvasRef.current;\r\n    const video = videoRef.current;\r\n\r\n    canvas.width = dimensions.width;\r\n    canvas.height = dimensions.height;\r\n\r\n    const context = canvas.getContext(\"2d\");\r\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/process-frame\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          frame: canvas.toDataURL(\"image/png\"),\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error sending frame:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"video-container\">\r\n      <video\r\n        ref={videoRef}\r\n        width={dimensions.width}\r\n        height={dimensions.height}\r\n        autoPlay\r\n        playsInline\r\n        muted\r\n      />\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={dimensions.width}\r\n        height={dimensions.height}\r\n        style={{ display: \"none\" }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}